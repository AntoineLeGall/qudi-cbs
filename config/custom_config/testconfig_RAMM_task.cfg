#  Example Qudi configuration file.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray']

    module_server:
        address: 'localhost'
        port: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware: 
    cameradummy:
        module.Class: 'camera.camera_dummy.CameraDummy'

    hamamatsu_camera:
        module.Class: 'camera.hamamatsu.hamamatsu.HCam'
        default_exposure: 0.01

    nifpga:
        module.Class: 'fpga.ni_fpga.Nifpga'
        resource: 'RIO0'
        default_bitfile: 'C:\\Users\\sCMOS-1\\qudi-cbs\\hardware\\fpga\\FPGA\\FPGA Bitfiles\\FPGAv0_FPGATarget_FPGAlasercontrol_4afbWL6Gt+k.lvbitx'
        wavelengths:
            - '405 nm'
            - '488 nm'
            - '561 nm'
            - '641 nm'
        registers:
            - '405'
            - '488'
            - '561'
            - '640'
        integration_time_us: 100
        registers_qpd:
            - 'X'
            - 'Y'
            - 'I'
            - 'Integration_time_us'
            - 'Duration_ms'
            - 'Task'

    nidaq_6259:
        module.Class: 'daq.national_instruments_m_series_MCL.NIDAQMSeries'
        piezo_read: 'Dev1/AI0'
        piezo_write: 'Dev1/AO1'
        ao_voltage_range: [0, 10]
        do_start_acquisition: '/Dev1/port0/line7'
        do_acquisition_done: '/Dev1/port0/line8'
        read_write_timeout: 10 # in seconds
    
    nofilter_dummy:
        module.Class: 'wheels.dummy_nofilter.NoFilterDummy'
        num_filters: 1
        filterpositions:
            - 1
        filters:
            - 'quad-band filter'
        allowed_lasers:
            - [True, True, True, True]

            # please specify for all elements corresponding information in the same order.

    mcl:
        module.Class: 'motor.motor_mcl_nanodrive.MCLNanoDrive'
        dll_location: 'C:\\Program Files\\Mad City Labs\\NanoDrive\\Madlib.dll'   # path to library file
        pos_min: 0  # in um
        pos_max: 80  # in um
        max_step: 1  # in um


logic:
    nidaq_6259_logic:
        module.Class: 'daq_ao_logic2.DAQaoLogic'
        connect: 
            daq: 'nidaq_6259'
            

            
    camera_logic:
        module.Class: 'camera_logic2.CameraLogic'
        connect:
            hardware: 'hamamatsu_camera'  #'cameradummy'

    lasercontrol_logic:
        module.Class: 'lasercontrol_logic.LaserControlLogic'
        controllertype: 'fpga'  # 'daq'
        connect:
            controller: 'nifpga'

    filterwheel_logic: 
        module.Class: 'filterwheel_logic.FilterwheelLogic'
        connect:
            wheel: 'nofilter_dummy'
            lasercontrol: 'lasercontrol_logic'

    focus_logic:
        module.Class: 'focus_logic.FocusLogic'
        init_position: 10
        connect:
            piezo: 'mcl'



    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
            #dummyTask:
            #    module: 'dummy'
            TestTask:
                module: 'testtask_ramm'
                needsmodules:
                    fpga: 'lasercontrol_logic'
            

            MulticolorScanTask:
                module: 'multicolor_scan_task_RAMM'
                needsmodules:
                    fpga: 'lasercontrol_logic'
                    cam: 'camera_logic'
                    daq: 'nidaq_6259_logic'
                    piezo: 'focus_logic'
                    



gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    taskrunner:
        module.Class: 'taskrunner.taskgui.TaskGui'
        connect:
            tasklogic: 'tasklogic'

    basic_gui:
        module.Class: 'fluorescence_microscopy.basic_gui.BasicGUI'
        default_path: 'E:\DATA'
        brightfield_control: False
        connect:
            camera_logic: 'camera_logic'
            laser_logic: 'lasercontrol_logic'
            filterwheel_logic: 'filterwheel_logic'

    focus_gui:
        module.Class: 'focus.focus_gui.FocusGUI'
        connect:
            focus_logic: 'focus_logic'



